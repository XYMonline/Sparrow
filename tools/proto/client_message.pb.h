// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fmessage_2eproto;
namespace message_type {
class business_client;
struct business_clientDefaultTypeInternal;
extern business_clientDefaultTypeInternal _business_client_default_instance_;
class login_client;
struct login_clientDefaultTypeInternal;
extern login_clientDefaultTypeInternal _login_client_default_instance_;
class user_message;
struct user_messageDefaultTypeInternal;
extern user_messageDefaultTypeInternal _user_message_default_instance_;
}  // namespace message_type
PROTOBUF_NAMESPACE_OPEN
template<> ::message_type::business_client* Arena::CreateMaybeMessage<::message_type::business_client>(Arena*);
template<> ::message_type::login_client* Arena::CreateMaybeMessage<::message_type::login_client>(Arena*);
template<> ::message_type::user_message* Arena::CreateMaybeMessage<::message_type::user_message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message_type {

enum category_login_client : int {
  REQUEST_LOGIN = 0,
  REQUEST_SIGNUP = 1,
  REQUEST_FORGET = 2,
  REQUEST_SIGN_BACK = 8,
  RESPONSE_LOGIN_SUCCESS = 3,
  RESPONSE_LOGIN_FAILED = 4,
  RESPONSE_SIGNUP_SUCCESS = 5,
  RESPONSE_SIGNUP_FAILED = 6,
  RESPONSE_RESET = 7,
  category_login_client_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  category_login_client_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool category_login_client_IsValid(int value);
constexpr category_login_client category_login_client_MIN = REQUEST_LOGIN;
constexpr category_login_client category_login_client_MAX = REQUEST_SIGN_BACK;
constexpr int category_login_client_ARRAYSIZE = category_login_client_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* category_login_client_descriptor();
template<typename T>
inline const std::string& category_login_client_Name(T enum_t_value) {
  static_assert(::std::is_same<T, category_login_client>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function category_login_client_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    category_login_client_descriptor(), enum_t_value);
}
inline bool category_login_client_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, category_login_client* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<category_login_client>(
    category_login_client_descriptor(), name, value);
}
enum category_business_client : int {
  REQUEST_VERIFY = 0,
  RESPONSE_VERIFY = 1,
  REQUEST_FETCH_MESSAGE = 2,
  RESPONSE_FETCH_MESSAGE = 3,
  REQUEST_SEND_MESSAGE = 4,
  category_business_client_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  category_business_client_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool category_business_client_IsValid(int value);
constexpr category_business_client category_business_client_MIN = REQUEST_VERIFY;
constexpr category_business_client category_business_client_MAX = REQUEST_SEND_MESSAGE;
constexpr int category_business_client_ARRAYSIZE = category_business_client_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* category_business_client_descriptor();
template<typename T>
inline const std::string& category_business_client_Name(T enum_t_value) {
  static_assert(::std::is_same<T, category_business_client>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function category_business_client_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    category_business_client_descriptor(), enum_t_value);
}
inline bool category_business_client_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, category_business_client* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<category_business_client>(
    category_business_client_descriptor(), name, value);
}
// ===================================================================

class login_client final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_type.login_client) */ {
 public:
  inline login_client() : login_client(nullptr) {}
  ~login_client() override;
  explicit PROTOBUF_CONSTEXPR login_client(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_client(const login_client& from);
  login_client(login_client&& from) noexcept
    : login_client() {
    *this = ::std::move(from);
  }

  inline login_client& operator=(const login_client& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_client& operator=(login_client&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const login_client& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_client* internal_default_instance() {
    return reinterpret_cast<const login_client*>(
               &_login_client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(login_client& a, login_client& b) {
    a.Swap(&b);
  }
  inline void Swap(login_client* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_client* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  login_client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<login_client>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const login_client& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const login_client& from) {
    login_client::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_client* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_type.login_client";
  }
  protected:
  explicit login_client(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kTokenFieldNumber = 3,
    kEmailFieldNumber = 4,
    kPasswordFieldNumber = 5,
    kUriFieldNumber = 6,
    kCategoryFieldNumber = 1,
  };
  // string uuid = 2;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string email = 4;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 5;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string uri = 6;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // .message_type.category_login_client category = 1;
  void clear_category();
  ::message_type::category_login_client category() const;
  void set_category(::message_type::category_login_client value);
  private:
  ::message_type::category_login_client _internal_category() const;
  void _internal_set_category(::message_type::category_login_client value);
  public:

  // @@protoc_insertion_point(class_scope:message_type.login_client)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    int category_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class business_client final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_type.business_client) */ {
 public:
  inline business_client() : business_client(nullptr) {}
  ~business_client() override;
  explicit PROTOBUF_CONSTEXPR business_client(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  business_client(const business_client& from);
  business_client(business_client&& from) noexcept
    : business_client() {
    *this = ::std::move(from);
  }

  inline business_client& operator=(const business_client& from) {
    CopyFrom(from);
    return *this;
  }
  inline business_client& operator=(business_client&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const business_client& default_instance() {
    return *internal_default_instance();
  }
  static inline const business_client* internal_default_instance() {
    return reinterpret_cast<const business_client*>(
               &_business_client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(business_client& a, business_client& b) {
    a.Swap(&b);
  }
  inline void Swap(business_client* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(business_client* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  business_client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<business_client>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const business_client& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const business_client& from) {
    business_client::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(business_client* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_type.business_client";
  }
  protected:
  explicit business_client(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 5,
    kVerifyTokenFieldNumber = 3,
    kSenderIdFieldNumber = 4,
    kUuidFieldNumber = 6,
    kCategoryFieldNumber = 1,
    kVerifyResultFieldNumber = 2,
  };
  // repeated .message_type.user_message messages = 5;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::message_type::user_message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message_type::user_message >*
      mutable_messages();
  private:
  const ::message_type::user_message& _internal_messages(int index) const;
  ::message_type::user_message* _internal_add_messages();
  public:
  const ::message_type::user_message& messages(int index) const;
  ::message_type::user_message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message_type::user_message >&
      messages() const;

  // string verify_token = 3;
  void clear_verify_token();
  const std::string& verify_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verify_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verify_token();
  PROTOBUF_NODISCARD std::string* release_verify_token();
  void set_allocated_verify_token(std::string* verify_token);
  private:
  const std::string& _internal_verify_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verify_token(const std::string& value);
  std::string* _internal_mutable_verify_token();
  public:

  // string sender_id = 4;
  void clear_sender_id();
  const std::string& sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // string uuid = 6;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .message_type.category_business_client category = 1;
  void clear_category();
  ::message_type::category_business_client category() const;
  void set_category(::message_type::category_business_client value);
  private:
  ::message_type::category_business_client _internal_category() const;
  void _internal_set_category(::message_type::category_business_client value);
  public:

  // bool verify_result = 2;
  void clear_verify_result();
  bool verify_result() const;
  void set_verify_result(bool value);
  private:
  bool _internal_verify_result() const;
  void _internal_set_verify_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message_type.business_client)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message_type::user_message > messages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    int category_;
    bool verify_result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class user_message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_type.user_message) */ {
 public:
  inline user_message() : user_message(nullptr) {}
  ~user_message() override;
  explicit PROTOBUF_CONSTEXPR user_message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  user_message(const user_message& from);
  user_message(user_message&& from) noexcept
    : user_message() {
    *this = ::std::move(from);
  }

  inline user_message& operator=(const user_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_message& operator=(user_message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const user_message& default_instance() {
    return *internal_default_instance();
  }
  static inline const user_message* internal_default_instance() {
    return reinterpret_cast<const user_message*>(
               &_user_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(user_message& a, user_message& b) {
    a.Swap(&b);
  }
  inline void Swap(user_message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  user_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<user_message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const user_message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const user_message& from) {
    user_message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_type.user_message";
  }
  protected:
  explicit user_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kTextContentFieldNumber = 2,
    kSenderIdFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string text_content = 2;
  void clear_text_content();
  const std::string& text_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text_content();
  PROTOBUF_NODISCARD std::string* release_text_content();
  void set_allocated_text_content(std::string* text_content);
  private:
  const std::string& _internal_text_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_content(const std::string& value);
  std::string* _internal_mutable_text_content();
  public:

  // string sender_id = 3;
  void clear_sender_id();
  const std::string& sender_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_id();
  PROTOBUF_NODISCARD std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:message_type.user_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_client_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// login_client

// .message_type.category_login_client category = 1;
inline void login_client::clear_category() {
  _impl_.category_ = 0;
}
inline ::message_type::category_login_client login_client::_internal_category() const {
  return static_cast< ::message_type::category_login_client >(_impl_.category_);
}
inline ::message_type::category_login_client login_client::category() const {
  // @@protoc_insertion_point(field_get:message_type.login_client.category)
  return _internal_category();
}
inline void login_client::_internal_set_category(::message_type::category_login_client value) {
  
  _impl_.category_ = value;
}
inline void login_client::set_category(::message_type::category_login_client value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:message_type.login_client.category)
}

// string uuid = 2;
inline void login_client::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& login_client::uuid() const {
  // @@protoc_insertion_point(field_get:message_type.login_client.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void login_client::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.login_client.uuid)
}
inline std::string* login_client::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:message_type.login_client.uuid)
  return _s;
}
inline const std::string& login_client::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void login_client::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* login_client::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* login_client::release_uuid() {
  // @@protoc_insertion_point(field_release:message_type.login_client.uuid)
  return _impl_.uuid_.Release();
}
inline void login_client::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.login_client.uuid)
}

// string token = 3;
inline void login_client::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& login_client::token() const {
  // @@protoc_insertion_point(field_get:message_type.login_client.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void login_client::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.login_client.token)
}
inline std::string* login_client::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:message_type.login_client.token)
  return _s;
}
inline const std::string& login_client::_internal_token() const {
  return _impl_.token_.Get();
}
inline void login_client::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* login_client::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* login_client::release_token() {
  // @@protoc_insertion_point(field_release:message_type.login_client.token)
  return _impl_.token_.Release();
}
inline void login_client::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.login_client.token)
}

// string email = 4;
inline void login_client::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& login_client::email() const {
  // @@protoc_insertion_point(field_get:message_type.login_client.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void login_client::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.login_client.email)
}
inline std::string* login_client::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:message_type.login_client.email)
  return _s;
}
inline const std::string& login_client::_internal_email() const {
  return _impl_.email_.Get();
}
inline void login_client::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* login_client::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* login_client::release_email() {
  // @@protoc_insertion_point(field_release:message_type.login_client.email)
  return _impl_.email_.Release();
}
inline void login_client::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.login_client.email)
}

// string password = 5;
inline void login_client::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& login_client::password() const {
  // @@protoc_insertion_point(field_get:message_type.login_client.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void login_client::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.login_client.password)
}
inline std::string* login_client::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:message_type.login_client.password)
  return _s;
}
inline const std::string& login_client::_internal_password() const {
  return _impl_.password_.Get();
}
inline void login_client::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* login_client::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* login_client::release_password() {
  // @@protoc_insertion_point(field_release:message_type.login_client.password)
  return _impl_.password_.Release();
}
inline void login_client::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.login_client.password)
}

// string uri = 6;
inline void login_client::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& login_client::uri() const {
  // @@protoc_insertion_point(field_get:message_type.login_client.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void login_client::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.login_client.uri)
}
inline std::string* login_client::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:message_type.login_client.uri)
  return _s;
}
inline const std::string& login_client::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void login_client::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* login_client::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* login_client::release_uri() {
  // @@protoc_insertion_point(field_release:message_type.login_client.uri)
  return _impl_.uri_.Release();
}
inline void login_client::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.login_client.uri)
}

// -------------------------------------------------------------------

// business_client

// .message_type.category_business_client category = 1;
inline void business_client::clear_category() {
  _impl_.category_ = 0;
}
inline ::message_type::category_business_client business_client::_internal_category() const {
  return static_cast< ::message_type::category_business_client >(_impl_.category_);
}
inline ::message_type::category_business_client business_client::category() const {
  // @@protoc_insertion_point(field_get:message_type.business_client.category)
  return _internal_category();
}
inline void business_client::_internal_set_category(::message_type::category_business_client value) {
  
  _impl_.category_ = value;
}
inline void business_client::set_category(::message_type::category_business_client value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:message_type.business_client.category)
}

// string verify_token = 3;
inline void business_client::clear_verify_token() {
  _impl_.verify_token_.ClearToEmpty();
}
inline const std::string& business_client::verify_token() const {
  // @@protoc_insertion_point(field_get:message_type.business_client.verify_token)
  return _internal_verify_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void business_client::set_verify_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verify_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.business_client.verify_token)
}
inline std::string* business_client::mutable_verify_token() {
  std::string* _s = _internal_mutable_verify_token();
  // @@protoc_insertion_point(field_mutable:message_type.business_client.verify_token)
  return _s;
}
inline const std::string& business_client::_internal_verify_token() const {
  return _impl_.verify_token_.Get();
}
inline void business_client::_internal_set_verify_token(const std::string& value) {
  
  _impl_.verify_token_.Set(value, GetArenaForAllocation());
}
inline std::string* business_client::_internal_mutable_verify_token() {
  
  return _impl_.verify_token_.Mutable(GetArenaForAllocation());
}
inline std::string* business_client::release_verify_token() {
  // @@protoc_insertion_point(field_release:message_type.business_client.verify_token)
  return _impl_.verify_token_.Release();
}
inline void business_client::set_allocated_verify_token(std::string* verify_token) {
  if (verify_token != nullptr) {
    
  } else {
    
  }
  _impl_.verify_token_.SetAllocated(verify_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verify_token_.IsDefault()) {
    _impl_.verify_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.business_client.verify_token)
}

// bool verify_result = 2;
inline void business_client::clear_verify_result() {
  _impl_.verify_result_ = false;
}
inline bool business_client::_internal_verify_result() const {
  return _impl_.verify_result_;
}
inline bool business_client::verify_result() const {
  // @@protoc_insertion_point(field_get:message_type.business_client.verify_result)
  return _internal_verify_result();
}
inline void business_client::_internal_set_verify_result(bool value) {
  
  _impl_.verify_result_ = value;
}
inline void business_client::set_verify_result(bool value) {
  _internal_set_verify_result(value);
  // @@protoc_insertion_point(field_set:message_type.business_client.verify_result)
}

// string sender_id = 4;
inline void business_client::clear_sender_id() {
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& business_client::sender_id() const {
  // @@protoc_insertion_point(field_get:message_type.business_client.sender_id)
  return _internal_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void business_client::set_sender_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.business_client.sender_id)
}
inline std::string* business_client::mutable_sender_id() {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:message_type.business_client.sender_id)
  return _s;
}
inline const std::string& business_client::_internal_sender_id() const {
  return _impl_.sender_id_.Get();
}
inline void business_client::_internal_set_sender_id(const std::string& value) {
  
  _impl_.sender_id_.Set(value, GetArenaForAllocation());
}
inline std::string* business_client::_internal_mutable_sender_id() {
  
  return _impl_.sender_id_.Mutable(GetArenaForAllocation());
}
inline std::string* business_client::release_sender_id() {
  // @@protoc_insertion_point(field_release:message_type.business_client.sender_id)
  return _impl_.sender_id_.Release();
}
inline void business_client::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  _impl_.sender_id_.SetAllocated(sender_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.business_client.sender_id)
}

// repeated .message_type.user_message messages = 5;
inline int business_client::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int business_client::messages_size() const {
  return _internal_messages_size();
}
inline void business_client::clear_messages() {
  _impl_.messages_.Clear();
}
inline ::message_type::user_message* business_client::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:message_type.business_client.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message_type::user_message >*
business_client::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:message_type.business_client.messages)
  return &_impl_.messages_;
}
inline const ::message_type::user_message& business_client::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::message_type::user_message& business_client::messages(int index) const {
  // @@protoc_insertion_point(field_get:message_type.business_client.messages)
  return _internal_messages(index);
}
inline ::message_type::user_message* business_client::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::message_type::user_message* business_client::add_messages() {
  ::message_type::user_message* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:message_type.business_client.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message_type::user_message >&
business_client::messages() const {
  // @@protoc_insertion_point(field_list:message_type.business_client.messages)
  return _impl_.messages_;
}

// string uuid = 6;
inline void business_client::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& business_client::uuid() const {
  // @@protoc_insertion_point(field_get:message_type.business_client.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void business_client::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.business_client.uuid)
}
inline std::string* business_client::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:message_type.business_client.uuid)
  return _s;
}
inline const std::string& business_client::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void business_client::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* business_client::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* business_client::release_uuid() {
  // @@protoc_insertion_point(field_release:message_type.business_client.uuid)
  return _impl_.uuid_.Release();
}
inline void business_client::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.business_client.uuid)
}

// -------------------------------------------------------------------

// user_message

// string uuid = 1;
inline void user_message::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& user_message::uuid() const {
  // @@protoc_insertion_point(field_get:message_type.user_message.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void user_message::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.user_message.uuid)
}
inline std::string* user_message::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:message_type.user_message.uuid)
  return _s;
}
inline const std::string& user_message::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void user_message::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* user_message::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* user_message::release_uuid() {
  // @@protoc_insertion_point(field_release:message_type.user_message.uuid)
  return _impl_.uuid_.Release();
}
inline void user_message::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.user_message.uuid)
}

// string text_content = 2;
inline void user_message::clear_text_content() {
  _impl_.text_content_.ClearToEmpty();
}
inline const std::string& user_message::text_content() const {
  // @@protoc_insertion_point(field_get:message_type.user_message.text_content)
  return _internal_text_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void user_message::set_text_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.user_message.text_content)
}
inline std::string* user_message::mutable_text_content() {
  std::string* _s = _internal_mutable_text_content();
  // @@protoc_insertion_point(field_mutable:message_type.user_message.text_content)
  return _s;
}
inline const std::string& user_message::_internal_text_content() const {
  return _impl_.text_content_.Get();
}
inline void user_message::_internal_set_text_content(const std::string& value) {
  
  _impl_.text_content_.Set(value, GetArenaForAllocation());
}
inline std::string* user_message::_internal_mutable_text_content() {
  
  return _impl_.text_content_.Mutable(GetArenaForAllocation());
}
inline std::string* user_message::release_text_content() {
  // @@protoc_insertion_point(field_release:message_type.user_message.text_content)
  return _impl_.text_content_.Release();
}
inline void user_message::set_allocated_text_content(std::string* text_content) {
  if (text_content != nullptr) {
    
  } else {
    
  }
  _impl_.text_content_.SetAllocated(text_content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_content_.IsDefault()) {
    _impl_.text_content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.user_message.text_content)
}

// string sender_id = 3;
inline void user_message::clear_sender_id() {
  _impl_.sender_id_.ClearToEmpty();
}
inline const std::string& user_message::sender_id() const {
  // @@protoc_insertion_point(field_get:message_type.user_message.sender_id)
  return _internal_sender_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void user_message::set_sender_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.user_message.sender_id)
}
inline std::string* user_message::mutable_sender_id() {
  std::string* _s = _internal_mutable_sender_id();
  // @@protoc_insertion_point(field_mutable:message_type.user_message.sender_id)
  return _s;
}
inline const std::string& user_message::_internal_sender_id() const {
  return _impl_.sender_id_.Get();
}
inline void user_message::_internal_set_sender_id(const std::string& value) {
  
  _impl_.sender_id_.Set(value, GetArenaForAllocation());
}
inline std::string* user_message::_internal_mutable_sender_id() {
  
  return _impl_.sender_id_.Mutable(GetArenaForAllocation());
}
inline std::string* user_message::release_sender_id() {
  // @@protoc_insertion_point(field_release:message_type.user_message.sender_id)
  return _impl_.sender_id_.Release();
}
inline void user_message::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  _impl_.sender_id_.SetAllocated(sender_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_id_.IsDefault()) {
    _impl_.sender_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.user_message.sender_id)
}

// int64 timestamp = 4;
inline void user_message::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t user_message::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t user_message::timestamp() const {
  // @@protoc_insertion_point(field_get:message_type.user_message.timestamp)
  return _internal_timestamp();
}
inline void user_message::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void user_message::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:message_type.user_message.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message_type

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::message_type::category_login_client> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message_type::category_login_client>() {
  return ::message_type::category_login_client_descriptor();
}
template <> struct is_proto_enum< ::message_type::category_business_client> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message_type::category_business_client>() {
  return ::message_type::category_business_client_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fmessage_2eproto
