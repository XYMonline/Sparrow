// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_message.proto

#include "controller_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace message_type {
PROTOBUF_CONSTEXPR srever_info::srever_info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.master_uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.category_)*/0
  , /*decltype(_impl_.load_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct srever_infoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR srever_infoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~srever_infoDefaultTypeInternal() {}
  union {
    srever_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 srever_infoDefaultTypeInternal _srever_info_default_instance_;
PROTOBUF_CONSTEXPR route_controller::route_controller(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_list_)*/{}
  , /*decltype(_impl_.category_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct route_controllerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR route_controllerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~route_controllerDefaultTypeInternal() {}
  union {
    route_controller _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 route_controllerDefaultTypeInternal _route_controller_default_instance_;
}  // namespace message_type
static ::_pb::Metadata file_level_metadata_controller_5fmessage_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_controller_5fmessage_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_controller_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_controller_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_type::srever_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message_type::srever_info, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::message_type::srever_info, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::message_type::srever_info, _impl_.load_),
  PROTOBUF_FIELD_OFFSET(::message_type::srever_info, _impl_.master_uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_type::route_controller, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message_type::route_controller, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::message_type::route_controller, _impl_.server_list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::message_type::srever_info)},
  { 10, -1, -1, sizeof(::message_type::route_controller)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::message_type::_srever_info_default_instance_._instance,
  &::message_type::_route_controller_default_instance_._instance,
};

const char descriptor_table_protodef_controller_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030controller_message.proto\022\014message_type"
  "\"m\n\013srever_info\022/\n\010category\030\001 \001(\0162\035.mess"
  "age_type.server_category\022\013\n\003uri\030\002 \001(\t\022\014\n"
  "\004load\030\003 \001(\005\022\022\n\nmaster_uri\030\004 \001(\t\"t\n\020route"
  "_controller\0220\n\010category\030\001 \001(\0162\036.message_"
  "type.message_category\022.\n\013server_list\030\002 \003"
  "(\0132\031.message_type.srever_info*6\n\020message"
  "_category\022\017\n\013SERVER_LIST\020\000\022\021\n\rFORCE_OFFL"
  "INE\020\001*4\n\017server_category\022\010\n\004AUTH\020\000\022\t\n\005RO"
  "UTE\020\001\022\014\n\010BUSINESS\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_controller_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_controller_5fmessage_2eproto = {
    false, false, 387, descriptor_table_protodef_controller_5fmessage_2eproto,
    "controller_message.proto",
    &descriptor_table_controller_5fmessage_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_controller_5fmessage_2eproto::offsets,
    file_level_metadata_controller_5fmessage_2eproto, file_level_enum_descriptors_controller_5fmessage_2eproto,
    file_level_service_descriptors_controller_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_controller_5fmessage_2eproto_getter() {
  return &descriptor_table_controller_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_controller_5fmessage_2eproto(&descriptor_table_controller_5fmessage_2eproto);
namespace message_type {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* message_category_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controller_5fmessage_2eproto);
  return file_level_enum_descriptors_controller_5fmessage_2eproto[0];
}
bool message_category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* server_category_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controller_5fmessage_2eproto);
  return file_level_enum_descriptors_controller_5fmessage_2eproto[1];
}
bool server_category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class srever_info::_Internal {
 public:
};

srever_info::srever_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message_type.srever_info)
}
srever_info::srever_info(const srever_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  srever_info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.master_uri_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.load_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.master_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.master_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_master_uri().empty()) {
    _this->_impl_.master_uri_.Set(from._internal_master_uri(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.category_, &from._impl_.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.load_) -
    reinterpret_cast<char*>(&_impl_.category_)) + sizeof(_impl_.load_));
  // @@protoc_insertion_point(copy_constructor:message_type.srever_info)
}

inline void srever_info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.master_uri_){}
    , decltype(_impl_.category_){0}
    , decltype(_impl_.load_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.master_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.master_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

srever_info::~srever_info() {
  // @@protoc_insertion_point(destructor:message_type.srever_info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void srever_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
  _impl_.master_uri_.Destroy();
}

void srever_info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void srever_info::Clear() {
// @@protoc_insertion_point(message_clear_start:message_type.srever_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _impl_.master_uri_.ClearToEmpty();
  ::memset(&_impl_.category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.load_) -
      reinterpret_cast<char*>(&_impl_.category_)) + sizeof(_impl_.load_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* srever_info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_type.server_category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_category(static_cast<::message_type::server_category>(val));
        } else
          goto handle_unusual;
        continue;
      // string uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message_type.srever_info.uri"));
        } else
          goto handle_unusual;
        continue;
      // int32 load = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.load_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string master_uri = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_master_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message_type.srever_info.master_uri"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* srever_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_type.srever_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_type.server_category category = 1;
  if (this->_internal_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  // string uri = 2;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_type.srever_info.uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri(), target);
  }

  // int32 load = 3;
  if (this->_internal_load() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_load(), target);
  }

  // string master_uri = 4;
  if (!this->_internal_master_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_master_uri().data(), static_cast<int>(this->_internal_master_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_type.srever_info.master_uri");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_master_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_type.srever_info)
  return target;
}

size_t srever_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_type.srever_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 2;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string master_uri = 4;
  if (!this->_internal_master_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_master_uri());
  }

  // .message_type.server_category category = 1;
  if (this->_internal_category() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_category());
  }

  // int32 load = 3;
  if (this->_internal_load() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_load());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData srever_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    srever_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*srever_info::GetClassData() const { return &_class_data_; }


void srever_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<srever_info*>(&to_msg);
  auto& from = static_cast<const srever_info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message_type.srever_info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_master_uri().empty()) {
    _this->_internal_set_master_uri(from._internal_master_uri());
  }
  if (from._internal_category() != 0) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_load() != 0) {
    _this->_internal_set_load(from._internal_load());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void srever_info::CopyFrom(const srever_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_type.srever_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool srever_info::IsInitialized() const {
  return true;
}

void srever_info::InternalSwap(srever_info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.master_uri_, lhs_arena,
      &other->_impl_.master_uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(srever_info, _impl_.load_)
      + sizeof(srever_info::_impl_.load_)
      - PROTOBUF_FIELD_OFFSET(srever_info, _impl_.category_)>(
          reinterpret_cast<char*>(&_impl_.category_),
          reinterpret_cast<char*>(&other->_impl_.category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata srever_info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_controller_5fmessage_2eproto_getter, &descriptor_table_controller_5fmessage_2eproto_once,
      file_level_metadata_controller_5fmessage_2eproto[0]);
}

// ===================================================================

class route_controller::_Internal {
 public:
};

route_controller::route_controller(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message_type.route_controller)
}
route_controller::route_controller(const route_controller& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  route_controller* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_list_){from._impl_.server_list_}
    , decltype(_impl_.category_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.category_ = from._impl_.category_;
  // @@protoc_insertion_point(copy_constructor:message_type.route_controller)
}

inline void route_controller::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_list_){arena}
    , decltype(_impl_.category_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

route_controller::~route_controller() {
  // @@protoc_insertion_point(destructor:message_type.route_controller)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void route_controller::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.server_list_.~RepeatedPtrField();
}

void route_controller::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void route_controller::Clear() {
// @@protoc_insertion_point(message_clear_start:message_type.route_controller)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_list_.Clear();
  _impl_.category_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* route_controller::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_type.message_category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_category(static_cast<::message_type::message_category>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .message_type.srever_info server_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_server_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* route_controller::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_type.route_controller)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_type.message_category category = 1;
  if (this->_internal_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  // repeated .message_type.srever_info server_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_server_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_server_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_type.route_controller)
  return target;
}

size_t route_controller::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_type.route_controller)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message_type.srever_info server_list = 2;
  total_size += 1UL * this->_internal_server_list_size();
  for (const auto& msg : this->_impl_.server_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .message_type.message_category category = 1;
  if (this->_internal_category() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_category());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData route_controller::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    route_controller::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*route_controller::GetClassData() const { return &_class_data_; }


void route_controller::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<route_controller*>(&to_msg);
  auto& from = static_cast<const route_controller&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message_type.route_controller)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.server_list_.MergeFrom(from._impl_.server_list_);
  if (from._internal_category() != 0) {
    _this->_internal_set_category(from._internal_category());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void route_controller::CopyFrom(const route_controller& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_type.route_controller)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool route_controller::IsInitialized() const {
  return true;
}

void route_controller::InternalSwap(route_controller* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.server_list_.InternalSwap(&other->_impl_.server_list_);
  swap(_impl_.category_, other->_impl_.category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata route_controller::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_controller_5fmessage_2eproto_getter, &descriptor_table_controller_5fmessage_2eproto_once,
      file_level_metadata_controller_5fmessage_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace message_type
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message_type::srever_info*
Arena::CreateMaybeMessage< ::message_type::srever_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_type::srever_info >(arena);
}
template<> PROTOBUF_NOINLINE ::message_type::route_controller*
Arena::CreateMaybeMessage< ::message_type::route_controller >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_type::route_controller >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
