// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_message.proto

#include "server_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace message_type {
PROTOBUF_CONSTEXPR route_auth::route_auth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.category_)*/0
  , /*decltype(_impl_.server_load_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct route_authDefaultTypeInternal {
  PROTOBUF_CONSTEXPR route_authDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~route_authDefaultTypeInternal() {}
  union {
    route_auth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 route_authDefaultTypeInternal _route_auth_default_instance_;
PROTOBUF_CONSTEXPR route_business::route_business(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.category_)*/0
  , /*decltype(_impl_.server_load_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct route_businessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR route_businessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~route_businessDefaultTypeInternal() {}
  union {
    route_business _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 route_businessDefaultTypeInternal _route_business_default_instance_;
PROTOBUF_CONSTEXPR route_route::route_route(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.category_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct route_routeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR route_routeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~route_routeDefaultTypeInternal() {}
  union {
    route_route _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 route_routeDefaultTypeInternal _route_route_default_instance_;
}  // namespace message_type
static ::_pb::Metadata file_level_metadata_server_5fmessage_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_server_5fmessage_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_server_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_server_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_type::route_auth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message_type::route_auth, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::message_type::route_auth, _impl_.server_load_),
  PROTOBUF_FIELD_OFFSET(::message_type::route_auth, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::message_type::route_auth, _impl_.uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_type::route_business, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message_type::route_business, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::message_type::route_business, _impl_.server_load_),
  PROTOBUF_FIELD_OFFSET(::message_type::route_business, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::message_type::route_business, _impl_.uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message_type::route_route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message_type::route_route, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::message_type::route_route, _impl_.uri_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::message_type::route_auth)},
  { 10, -1, -1, sizeof(::message_type::route_business)},
  { 20, -1, -1, sizeof(::message_type::route_route)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::message_type::_route_auth_default_instance_._instance,
  &::message_type::_route_business_default_instance_._instance,
  &::message_type::_route_route_default_instance_._instance,
};

const char descriptor_table_protodef_server_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024server_message.proto\022\014message_type\"o\n\n"
  "route_auth\0220\n\010category\030\001 \001(\0162\036.message_t"
  "ype.message_category\022\023\n\013server_load\030\002 \001("
  "\005\022\r\n\005token\030\003 \001(\t\022\013\n\003uri\030\004 \001(\t\"x\n\016route_b"
  "usiness\0220\n\010category\030\001 \001(\0162\036.message_type"
  ".message_category\022\023\n\013server_load\030\002 \001(\005\022\022"
  "\n\nsession_id\030\003 \001(\t\022\013\n\003uri\030\004 \001(\t\"L\n\013route"
  "_route\0220\n\010category\030\001 \001(\0162\036.message_type."
  "message_category\022\013\n\003uri\030\002 \001(\t*\224\001\n\020messag"
  "e_category\022\024\n\020REQUEST_ALLOCATE\020\000\022\024\n\020ALLO"
  "CATE_SUCCESS\020\001\022\021\n\rALLOCATE_FAIL\020\002\022\016\n\nROU"
  "TE_JOIN\020\003\022\017\n\013ROUTE_LEAVE\020\004\022\017\n\013UPDATE_LOA"
  "D\020\005\022\017\n\013SERVER_INFO\020\006b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_server_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_server_5fmessage_2eproto = {
    false, false, 508, descriptor_table_protodef_server_5fmessage_2eproto,
    "server_message.proto",
    &descriptor_table_server_5fmessage_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_server_5fmessage_2eproto::offsets,
    file_level_metadata_server_5fmessage_2eproto, file_level_enum_descriptors_server_5fmessage_2eproto,
    file_level_service_descriptors_server_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_server_5fmessage_2eproto_getter() {
  return &descriptor_table_server_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_server_5fmessage_2eproto(&descriptor_table_server_5fmessage_2eproto);
namespace message_type {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* message_category_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fmessage_2eproto);
  return file_level_enum_descriptors_server_5fmessage_2eproto[0];
}
bool message_category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class route_auth::_Internal {
 public:
};

route_auth::route_auth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message_type.route_auth)
}
route_auth::route_auth(const route_auth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  route_auth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.server_load_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.category_, &from._impl_.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_load_) -
    reinterpret_cast<char*>(&_impl_.category_)) + sizeof(_impl_.server_load_));
  // @@protoc_insertion_point(copy_constructor:message_type.route_auth)
}

inline void route_auth::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.category_){0}
    , decltype(_impl_.server_load_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

route_auth::~route_auth() {
  // @@protoc_insertion_point(destructor:message_type.route_auth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void route_auth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.uri_.Destroy();
}

void route_auth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void route_auth::Clear() {
// @@protoc_insertion_point(message_clear_start:message_type.route_auth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.uri_.ClearToEmpty();
  ::memset(&_impl_.category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.server_load_) -
      reinterpret_cast<char*>(&_impl_.category_)) + sizeof(_impl_.server_load_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* route_auth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_type.message_category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_category(static_cast<::message_type::message_category>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 server_load = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_load_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message_type.route_auth.token"));
        } else
          goto handle_unusual;
        continue;
      // string uri = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message_type.route_auth.uri"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* route_auth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_type.route_auth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_type.message_category category = 1;
  if (this->_internal_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  // int32 server_load = 2;
  if (this->_internal_server_load() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_load(), target);
  }

  // string token = 3;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_type.route_auth.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  // string uri = 4;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_type.route_auth.uri");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_type.route_auth)
  return target;
}

size_t route_auth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_type.route_auth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 3;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string uri = 4;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // .message_type.message_category category = 1;
  if (this->_internal_category() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_category());
  }

  // int32 server_load = 2;
  if (this->_internal_server_load() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_load());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData route_auth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    route_auth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*route_auth::GetClassData() const { return &_class_data_; }


void route_auth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<route_auth*>(&to_msg);
  auto& from = static_cast<const route_auth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message_type.route_auth)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (from._internal_category() != 0) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_server_load() != 0) {
    _this->_internal_set_server_load(from._internal_server_load());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void route_auth::CopyFrom(const route_auth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_type.route_auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool route_auth::IsInitialized() const {
  return true;
}

void route_auth::InternalSwap(route_auth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(route_auth, _impl_.server_load_)
      + sizeof(route_auth::_impl_.server_load_)
      - PROTOBUF_FIELD_OFFSET(route_auth, _impl_.category_)>(
          reinterpret_cast<char*>(&_impl_.category_),
          reinterpret_cast<char*>(&other->_impl_.category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata route_auth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[0]);
}

// ===================================================================

class route_business::_Internal {
 public:
};

route_business::route_business(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message_type.route_business)
}
route_business::route_business(const route_business& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  route_business* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.category_){}
    , decltype(_impl_.server_load_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.category_, &from._impl_.category_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_load_) -
    reinterpret_cast<char*>(&_impl_.category_)) + sizeof(_impl_.server_load_));
  // @@protoc_insertion_point(copy_constructor:message_type.route_business)
}

inline void route_business::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_id_){}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.category_){0}
    , decltype(_impl_.server_load_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

route_business::~route_business() {
  // @@protoc_insertion_point(destructor:message_type.route_business)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void route_business::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_id_.Destroy();
  _impl_.uri_.Destroy();
}

void route_business::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void route_business::Clear() {
// @@protoc_insertion_point(message_clear_start:message_type.route_business)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_id_.ClearToEmpty();
  _impl_.uri_.ClearToEmpty();
  ::memset(&_impl_.category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.server_load_) -
      reinterpret_cast<char*>(&_impl_.category_)) + sizeof(_impl_.server_load_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* route_business::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_type.message_category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_category(static_cast<::message_type::message_category>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 server_load = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_load_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message_type.route_business.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string uri = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message_type.route_business.uri"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* route_business::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_type.route_business)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_type.message_category category = 1;
  if (this->_internal_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  // int32 server_load = 2;
  if (this->_internal_server_load() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_load(), target);
  }

  // string session_id = 3;
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_type.route_business.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // string uri = 4;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_type.route_business.uri");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_type.route_business)
  return target;
}

size_t route_business::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_type.route_business)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 3;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string uri = 4;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // .message_type.message_category category = 1;
  if (this->_internal_category() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_category());
  }

  // int32 server_load = 2;
  if (this->_internal_server_load() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_load());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData route_business::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    route_business::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*route_business::GetClassData() const { return &_class_data_; }


void route_business::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<route_business*>(&to_msg);
  auto& from = static_cast<const route_business&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message_type.route_business)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (from._internal_category() != 0) {
    _this->_internal_set_category(from._internal_category());
  }
  if (from._internal_server_load() != 0) {
    _this->_internal_set_server_load(from._internal_server_load());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void route_business::CopyFrom(const route_business& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_type.route_business)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool route_business::IsInitialized() const {
  return true;
}

void route_business::InternalSwap(route_business* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(route_business, _impl_.server_load_)
      + sizeof(route_business::_impl_.server_load_)
      - PROTOBUF_FIELD_OFFSET(route_business, _impl_.category_)>(
          reinterpret_cast<char*>(&_impl_.category_),
          reinterpret_cast<char*>(&other->_impl_.category_));
}

::PROTOBUF_NAMESPACE_ID::Metadata route_business::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[1]);
}

// ===================================================================

class route_route::_Internal {
 public:
};

route_route::route_route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message_type.route_route)
}
route_route::route_route(const route_route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  route_route* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.category_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.category_ = from._impl_.category_;
  // @@protoc_insertion_point(copy_constructor:message_type.route_route)
}

inline void route_route::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.category_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

route_route::~route_route() {
  // @@protoc_insertion_point(destructor:message_type.route_route)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void route_route::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
}

void route_route::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void route_route::Clear() {
// @@protoc_insertion_point(message_clear_start:message_type.route_route)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  _impl_.category_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* route_route::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .message_type.message_category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_category(static_cast<::message_type::message_category>(val));
        } else
          goto handle_unusual;
        continue;
      // string uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message_type.route_route.uri"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* route_route::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_type.route_route)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .message_type.message_category category = 1;
  if (this->_internal_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  // string uri = 2;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message_type.route_route.uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_type.route_route)
  return target;
}

size_t route_route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_type.route_route)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 2;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // .message_type.message_category category = 1;
  if (this->_internal_category() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_category());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData route_route::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    route_route::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*route_route::GetClassData() const { return &_class_data_; }


void route_route::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<route_route*>(&to_msg);
  auto& from = static_cast<const route_route&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message_type.route_route)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (from._internal_category() != 0) {
    _this->_internal_set_category(from._internal_category());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void route_route::CopyFrom(const route_route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_type.route_route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool route_route::IsInitialized() const {
  return true;
}

void route_route::InternalSwap(route_route* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  swap(_impl_.category_, other->_impl_.category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata route_route::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace message_type
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message_type::route_auth*
Arena::CreateMaybeMessage< ::message_type::route_auth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_type::route_auth >(arena);
}
template<> PROTOBUF_NOINLINE ::message_type::route_business*
Arena::CreateMaybeMessage< ::message_type::route_business >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_type::route_business >(arena);
}
template<> PROTOBUF_NOINLINE ::message_type::route_route*
Arena::CreateMaybeMessage< ::message_type::route_route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message_type::route_route >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
