// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fmessage_2eproto;
namespace message_type {
class route_auth;
struct route_authDefaultTypeInternal;
extern route_authDefaultTypeInternal _route_auth_default_instance_;
class route_business;
struct route_businessDefaultTypeInternal;
extern route_businessDefaultTypeInternal _route_business_default_instance_;
class route_route;
struct route_routeDefaultTypeInternal;
extern route_routeDefaultTypeInternal _route_route_default_instance_;
}  // namespace message_type
PROTOBUF_NAMESPACE_OPEN
template<> ::message_type::route_auth* Arena::CreateMaybeMessage<::message_type::route_auth>(Arena*);
template<> ::message_type::route_business* Arena::CreateMaybeMessage<::message_type::route_business>(Arena*);
template<> ::message_type::route_route* Arena::CreateMaybeMessage<::message_type::route_route>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message_type {

enum message_category : int {
  REQUEST_ALLOCATE = 0,
  ALLOCATE_SUCCESS = 1,
  ALLOCATE_FAIL = 2,
  ROUTE_JOIN = 3,
  ROUTE_LEAVE = 4,
  UPDATE_LOAD = 5,
  SERVER_INFO = 6,
  message_category_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  message_category_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool message_category_IsValid(int value);
constexpr message_category message_category_MIN = REQUEST_ALLOCATE;
constexpr message_category message_category_MAX = SERVER_INFO;
constexpr int message_category_ARRAYSIZE = message_category_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* message_category_descriptor();
template<typename T>
inline const std::string& message_category_Name(T enum_t_value) {
  static_assert(::std::is_same<T, message_category>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function message_category_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    message_category_descriptor(), enum_t_value);
}
inline bool message_category_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, message_category* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<message_category>(
    message_category_descriptor(), name, value);
}
// ===================================================================

class route_auth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_type.route_auth) */ {
 public:
  inline route_auth() : route_auth(nullptr) {}
  ~route_auth() override;
  explicit PROTOBUF_CONSTEXPR route_auth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  route_auth(const route_auth& from);
  route_auth(route_auth&& from) noexcept
    : route_auth() {
    *this = ::std::move(from);
  }

  inline route_auth& operator=(const route_auth& from) {
    CopyFrom(from);
    return *this;
  }
  inline route_auth& operator=(route_auth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const route_auth& default_instance() {
    return *internal_default_instance();
  }
  static inline const route_auth* internal_default_instance() {
    return reinterpret_cast<const route_auth*>(
               &_route_auth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(route_auth& a, route_auth& b) {
    a.Swap(&b);
  }
  inline void Swap(route_auth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(route_auth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  route_auth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<route_auth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const route_auth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const route_auth& from) {
    route_auth::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(route_auth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_type.route_auth";
  }
  protected:
  explicit route_auth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kUriFieldNumber = 4,
    kCategoryFieldNumber = 1,
    kServerLoadFieldNumber = 2,
  };
  // string token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string uri = 4;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // .message_type.message_category category = 1;
  void clear_category();
  ::message_type::message_category category() const;
  void set_category(::message_type::message_category value);
  private:
  ::message_type::message_category _internal_category() const;
  void _internal_set_category(::message_type::message_category value);
  public:

  // int32 server_load = 2;
  void clear_server_load();
  int32_t server_load() const;
  void set_server_load(int32_t value);
  private:
  int32_t _internal_server_load() const;
  void _internal_set_server_load(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message_type.route_auth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    int category_;
    int32_t server_load_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class route_business final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_type.route_business) */ {
 public:
  inline route_business() : route_business(nullptr) {}
  ~route_business() override;
  explicit PROTOBUF_CONSTEXPR route_business(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  route_business(const route_business& from);
  route_business(route_business&& from) noexcept
    : route_business() {
    *this = ::std::move(from);
  }

  inline route_business& operator=(const route_business& from) {
    CopyFrom(from);
    return *this;
  }
  inline route_business& operator=(route_business&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const route_business& default_instance() {
    return *internal_default_instance();
  }
  static inline const route_business* internal_default_instance() {
    return reinterpret_cast<const route_business*>(
               &_route_business_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(route_business& a, route_business& b) {
    a.Swap(&b);
  }
  inline void Swap(route_business* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(route_business* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  route_business* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<route_business>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const route_business& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const route_business& from) {
    route_business::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(route_business* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_type.route_business";
  }
  protected:
  explicit route_business(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 3,
    kCategoryFieldNumber = 1,
    kServerLoadFieldNumber = 2,
  };
  // string uri = 3;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // .message_type.message_category category = 1;
  void clear_category();
  ::message_type::message_category category() const;
  void set_category(::message_type::message_category value);
  private:
  ::message_type::message_category _internal_category() const;
  void _internal_set_category(::message_type::message_category value);
  public:

  // int32 server_load = 2;
  void clear_server_load();
  int32_t server_load() const;
  void set_server_load(int32_t value);
  private:
  int32_t _internal_server_load() const;
  void _internal_set_server_load(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message_type.route_business)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    int category_;
    int32_t server_load_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class route_route final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message_type.route_route) */ {
 public:
  inline route_route() : route_route(nullptr) {}
  ~route_route() override;
  explicit PROTOBUF_CONSTEXPR route_route(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  route_route(const route_route& from);
  route_route(route_route&& from) noexcept
    : route_route() {
    *this = ::std::move(from);
  }

  inline route_route& operator=(const route_route& from) {
    CopyFrom(from);
    return *this;
  }
  inline route_route& operator=(route_route&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const route_route& default_instance() {
    return *internal_default_instance();
  }
  static inline const route_route* internal_default_instance() {
    return reinterpret_cast<const route_route*>(
               &_route_route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(route_route& a, route_route& b) {
    a.Swap(&b);
  }
  inline void Swap(route_route* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(route_route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  route_route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<route_route>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const route_route& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const route_route& from) {
    route_route::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(route_route* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message_type.route_route";
  }
  protected:
  explicit route_route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 2,
    kTokenFieldNumber = 3,
    kCategoryFieldNumber = 1,
  };
  // string uri = 2;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .message_type.message_category category = 1;
  void clear_category();
  ::message_type::message_category category() const;
  void set_category(::message_type::message_category value);
  private:
  ::message_type::message_category _internal_category() const;
  void _internal_set_category(::message_type::message_category value);
  public:

  // @@protoc_insertion_point(class_scope:message_type.route_route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int category_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// route_auth

// .message_type.message_category category = 1;
inline void route_auth::clear_category() {
  _impl_.category_ = 0;
}
inline ::message_type::message_category route_auth::_internal_category() const {
  return static_cast< ::message_type::message_category >(_impl_.category_);
}
inline ::message_type::message_category route_auth::category() const {
  // @@protoc_insertion_point(field_get:message_type.route_auth.category)
  return _internal_category();
}
inline void route_auth::_internal_set_category(::message_type::message_category value) {
  
  _impl_.category_ = value;
}
inline void route_auth::set_category(::message_type::message_category value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:message_type.route_auth.category)
}

// int32 server_load = 2;
inline void route_auth::clear_server_load() {
  _impl_.server_load_ = 0;
}
inline int32_t route_auth::_internal_server_load() const {
  return _impl_.server_load_;
}
inline int32_t route_auth::server_load() const {
  // @@protoc_insertion_point(field_get:message_type.route_auth.server_load)
  return _internal_server_load();
}
inline void route_auth::_internal_set_server_load(int32_t value) {
  
  _impl_.server_load_ = value;
}
inline void route_auth::set_server_load(int32_t value) {
  _internal_set_server_load(value);
  // @@protoc_insertion_point(field_set:message_type.route_auth.server_load)
}

// string token = 3;
inline void route_auth::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& route_auth::token() const {
  // @@protoc_insertion_point(field_get:message_type.route_auth.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void route_auth::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.route_auth.token)
}
inline std::string* route_auth::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:message_type.route_auth.token)
  return _s;
}
inline const std::string& route_auth::_internal_token() const {
  return _impl_.token_.Get();
}
inline void route_auth::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* route_auth::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* route_auth::release_token() {
  // @@protoc_insertion_point(field_release:message_type.route_auth.token)
  return _impl_.token_.Release();
}
inline void route_auth::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.route_auth.token)
}

// string uri = 4;
inline void route_auth::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& route_auth::uri() const {
  // @@protoc_insertion_point(field_get:message_type.route_auth.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void route_auth::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.route_auth.uri)
}
inline std::string* route_auth::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:message_type.route_auth.uri)
  return _s;
}
inline const std::string& route_auth::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void route_auth::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* route_auth::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* route_auth::release_uri() {
  // @@protoc_insertion_point(field_release:message_type.route_auth.uri)
  return _impl_.uri_.Release();
}
inline void route_auth::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.route_auth.uri)
}

// -------------------------------------------------------------------

// route_business

// .message_type.message_category category = 1;
inline void route_business::clear_category() {
  _impl_.category_ = 0;
}
inline ::message_type::message_category route_business::_internal_category() const {
  return static_cast< ::message_type::message_category >(_impl_.category_);
}
inline ::message_type::message_category route_business::category() const {
  // @@protoc_insertion_point(field_get:message_type.route_business.category)
  return _internal_category();
}
inline void route_business::_internal_set_category(::message_type::message_category value) {
  
  _impl_.category_ = value;
}
inline void route_business::set_category(::message_type::message_category value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:message_type.route_business.category)
}

// int32 server_load = 2;
inline void route_business::clear_server_load() {
  _impl_.server_load_ = 0;
}
inline int32_t route_business::_internal_server_load() const {
  return _impl_.server_load_;
}
inline int32_t route_business::server_load() const {
  // @@protoc_insertion_point(field_get:message_type.route_business.server_load)
  return _internal_server_load();
}
inline void route_business::_internal_set_server_load(int32_t value) {
  
  _impl_.server_load_ = value;
}
inline void route_business::set_server_load(int32_t value) {
  _internal_set_server_load(value);
  // @@protoc_insertion_point(field_set:message_type.route_business.server_load)
}

// string uri = 3;
inline void route_business::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& route_business::uri() const {
  // @@protoc_insertion_point(field_get:message_type.route_business.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void route_business::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.route_business.uri)
}
inline std::string* route_business::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:message_type.route_business.uri)
  return _s;
}
inline const std::string& route_business::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void route_business::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* route_business::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* route_business::release_uri() {
  // @@protoc_insertion_point(field_release:message_type.route_business.uri)
  return _impl_.uri_.Release();
}
inline void route_business::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.route_business.uri)
}

// -------------------------------------------------------------------

// route_route

// .message_type.message_category category = 1;
inline void route_route::clear_category() {
  _impl_.category_ = 0;
}
inline ::message_type::message_category route_route::_internal_category() const {
  return static_cast< ::message_type::message_category >(_impl_.category_);
}
inline ::message_type::message_category route_route::category() const {
  // @@protoc_insertion_point(field_get:message_type.route_route.category)
  return _internal_category();
}
inline void route_route::_internal_set_category(::message_type::message_category value) {
  
  _impl_.category_ = value;
}
inline void route_route::set_category(::message_type::message_category value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:message_type.route_route.category)
}

// string uri = 2;
inline void route_route::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& route_route::uri() const {
  // @@protoc_insertion_point(field_get:message_type.route_route.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void route_route::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.route_route.uri)
}
inline std::string* route_route::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:message_type.route_route.uri)
  return _s;
}
inline const std::string& route_route::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void route_route::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* route_route::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* route_route::release_uri() {
  // @@protoc_insertion_point(field_release:message_type.route_route.uri)
  return _impl_.uri_.Release();
}
inline void route_route::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.route_route.uri)
}

// string token = 3;
inline void route_route::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& route_route::token() const {
  // @@protoc_insertion_point(field_get:message_type.route_route.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void route_route::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message_type.route_route.token)
}
inline std::string* route_route::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:message_type.route_route.token)
  return _s;
}
inline const std::string& route_route::_internal_token() const {
  return _impl_.token_.Get();
}
inline void route_route::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* route_route::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* route_route::release_token() {
  // @@protoc_insertion_point(field_release:message_type.route_route.token)
  return _impl_.token_.Release();
}
inline void route_route::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message_type.route_route.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message_type

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::message_type::message_category> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::message_type::message_category>() {
  return ::message_type::message_category_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5fmessage_2eproto
