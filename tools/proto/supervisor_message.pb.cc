// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supervisor_message.proto

#include "supervisor_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace supr {
PROTOBUF_CONSTEXPR load_type::load_type(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.session_count_)*/0
  , /*decltype(_impl_.cpu_usage_)*/0
  , /*decltype(_impl_.memory_free_)*/uint64_t{0u}
  , /*decltype(_impl_.memory_total_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct load_typeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR load_typeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~load_typeDefaultTypeInternal() {}
  union {
    load_type _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 load_typeDefaultTypeInternal _load_type_default_instance_;
PROTOBUF_CONSTEXPR route_supervisor::route_supervisor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.load_list_)*/{}
  , /*decltype(_impl_.category_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct route_supervisorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR route_supervisorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~route_supervisorDefaultTypeInternal() {}
  union {
    route_supervisor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 route_supervisorDefaultTypeInternal _route_supervisor_default_instance_;
}  // namespace supr
static ::_pb::Metadata file_level_metadata_supervisor_5fmessage_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_supervisor_5fmessage_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_supervisor_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_supervisor_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::supr::load_type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::supr::load_type, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::supr::load_type, _impl_.session_count_),
  PROTOBUF_FIELD_OFFSET(::supr::load_type, _impl_.cpu_usage_),
  PROTOBUF_FIELD_OFFSET(::supr::load_type, _impl_.memory_free_),
  PROTOBUF_FIELD_OFFSET(::supr::load_type, _impl_.memory_total_),
  PROTOBUF_FIELD_OFFSET(::supr::load_type, _impl_.address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::supr::route_supervisor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::supr::route_supervisor, _impl_.category_),
  PROTOBUF_FIELD_OFFSET(::supr::route_supervisor, _impl_.load_list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::supr::load_type)},
  { 12, -1, -1, sizeof(::supr::route_supervisor)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::supr::_load_type_default_instance_._instance,
  &::supr::_route_supervisor_default_instance_._instance,
};

const char descriptor_table_protodef_supervisor_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030supervisor_message.proto\022\004supr\"\222\001\n\tloa"
  "d_type\022\037\n\004type\030\001 \001(\0162\021.supr.server_type\022"
  "\025\n\rsession_count\030\002 \001(\005\022\021\n\tcpu_usage\030\003 \001("
  "\001\022\023\n\013memory_free\030\004 \001(\004\022\024\n\014memory_total\030\005"
  " \001(\004\022\017\n\007address\030\006 \001(\t\"X\n\020route_superviso"
  "r\0221\n\010category\030\001 \001(\0162\037.supr.route_supervi"
  "sor_category\022\021\n\tload_list\030\002 \003(\t*\?\n\031route"
  "_supervisor_category\022\017\n\013SERVER_LIST\020\000\022\021\n"
  "\rFORCE_OFFLINE\020\001*E\n\013server_type\022\020\n\014ROUTE"
  "_SERVER\020\000\022\023\n\017BUSINESS_SERVER\020\001\022\017\n\013AUTH_S"
  "ERVER\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_supervisor_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_supervisor_5fmessage_2eproto = {
    false, false, 415, descriptor_table_protodef_supervisor_5fmessage_2eproto,
    "supervisor_message.proto",
    &descriptor_table_supervisor_5fmessage_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_supervisor_5fmessage_2eproto::offsets,
    file_level_metadata_supervisor_5fmessage_2eproto, file_level_enum_descriptors_supervisor_5fmessage_2eproto,
    file_level_service_descriptors_supervisor_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_supervisor_5fmessage_2eproto_getter() {
  return &descriptor_table_supervisor_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_supervisor_5fmessage_2eproto(&descriptor_table_supervisor_5fmessage_2eproto);
namespace supr {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* route_supervisor_category_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_supervisor_5fmessage_2eproto);
  return file_level_enum_descriptors_supervisor_5fmessage_2eproto[0];
}
bool route_supervisor_category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* server_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_supervisor_5fmessage_2eproto);
  return file_level_enum_descriptors_supervisor_5fmessage_2eproto[1];
}
bool server_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class load_type::_Internal {
 public:
};

load_type::load_type(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:supr.load_type)
}
load_type::load_type(const load_type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  load_type* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.session_count_){}
    , decltype(_impl_.cpu_usage_){}
    , decltype(_impl_.memory_free_){}
    , decltype(_impl_.memory_total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.memory_total_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.memory_total_));
  // @@protoc_insertion_point(copy_constructor:supr.load_type)
}

inline void load_type::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.session_count_){0}
    , decltype(_impl_.cpu_usage_){0}
    , decltype(_impl_.memory_free_){uint64_t{0u}}
    , decltype(_impl_.memory_total_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

load_type::~load_type() {
  // @@protoc_insertion_point(destructor:supr.load_type)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void load_type::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void load_type::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void load_type::Clear() {
// @@protoc_insertion_point(message_clear_start:supr.load_type)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.memory_total_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.memory_total_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* load_type::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .supr.server_type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::supr::server_type>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 session_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.session_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double cpu_usage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.cpu_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 memory_free = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.memory_free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 memory_total = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.memory_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "supr.load_type.address"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* load_type::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:supr.load_type)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .supr.server_type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 session_count = 2;
  if (this->_internal_session_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_session_count(), target);
  }

  // double cpu_usage = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = this->_internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_cpu_usage(), target);
  }

  // uint64 memory_free = 4;
  if (this->_internal_memory_free() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_memory_free(), target);
  }

  // uint64 memory_total = 5;
  if (this->_internal_memory_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_memory_total(), target);
  }

  // string address = 6;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "supr.load_type.address");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:supr.load_type)
  return target;
}

size_t load_type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:supr.load_type)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 6;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .supr.server_type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 session_count = 2;
  if (this->_internal_session_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_session_count());
  }

  // double cpu_usage = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = this->_internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    total_size += 1 + 8;
  }

  // uint64 memory_free = 4;
  if (this->_internal_memory_free() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_memory_free());
  }

  // uint64 memory_total = 5;
  if (this->_internal_memory_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_memory_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData load_type::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    load_type::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*load_type::GetClassData() const { return &_class_data_; }


void load_type::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<load_type*>(&to_msg);
  auto& from = static_cast<const load_type&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:supr.load_type)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_session_count() != 0) {
    _this->_internal_set_session_count(from._internal_session_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_usage = from._internal_cpu_usage();
  uint64_t raw_cpu_usage;
  memcpy(&raw_cpu_usage, &tmp_cpu_usage, sizeof(tmp_cpu_usage));
  if (raw_cpu_usage != 0) {
    _this->_internal_set_cpu_usage(from._internal_cpu_usage());
  }
  if (from._internal_memory_free() != 0) {
    _this->_internal_set_memory_free(from._internal_memory_free());
  }
  if (from._internal_memory_total() != 0) {
    _this->_internal_set_memory_total(from._internal_memory_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void load_type::CopyFrom(const load_type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:supr.load_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool load_type::IsInitialized() const {
  return true;
}

void load_type::InternalSwap(load_type* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(load_type, _impl_.memory_total_)
      + sizeof(load_type::_impl_.memory_total_)
      - PROTOBUF_FIELD_OFFSET(load_type, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata load_type::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_supervisor_5fmessage_2eproto_getter, &descriptor_table_supervisor_5fmessage_2eproto_once,
      file_level_metadata_supervisor_5fmessage_2eproto[0]);
}

// ===================================================================

class route_supervisor::_Internal {
 public:
};

route_supervisor::route_supervisor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:supr.route_supervisor)
}
route_supervisor::route_supervisor(const route_supervisor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  route_supervisor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.load_list_){from._impl_.load_list_}
    , decltype(_impl_.category_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.category_ = from._impl_.category_;
  // @@protoc_insertion_point(copy_constructor:supr.route_supervisor)
}

inline void route_supervisor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.load_list_){arena}
    , decltype(_impl_.category_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

route_supervisor::~route_supervisor() {
  // @@protoc_insertion_point(destructor:supr.route_supervisor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void route_supervisor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.load_list_.~RepeatedPtrField();
}

void route_supervisor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void route_supervisor::Clear() {
// @@protoc_insertion_point(message_clear_start:supr.route_supervisor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.load_list_.Clear();
  _impl_.category_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* route_supervisor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .supr.route_supervisor_category category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_category(static_cast<::supr::route_supervisor_category>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string load_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_load_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "supr.route_supervisor.load_list"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* route_supervisor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:supr.route_supervisor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .supr.route_supervisor_category category = 1;
  if (this->_internal_category() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_category(), target);
  }

  // repeated string load_list = 2;
  for (int i = 0, n = this->_internal_load_list_size(); i < n; i++) {
    const auto& s = this->_internal_load_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "supr.route_supervisor.load_list");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:supr.route_supervisor)
  return target;
}

size_t route_supervisor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:supr.route_supervisor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string load_list = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.load_list_.size());
  for (int i = 0, n = _impl_.load_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.load_list_.Get(i));
  }

  // .supr.route_supervisor_category category = 1;
  if (this->_internal_category() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_category());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData route_supervisor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    route_supervisor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*route_supervisor::GetClassData() const { return &_class_data_; }


void route_supervisor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<route_supervisor*>(&to_msg);
  auto& from = static_cast<const route_supervisor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:supr.route_supervisor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.load_list_.MergeFrom(from._impl_.load_list_);
  if (from._internal_category() != 0) {
    _this->_internal_set_category(from._internal_category());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void route_supervisor::CopyFrom(const route_supervisor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:supr.route_supervisor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool route_supervisor::IsInitialized() const {
  return true;
}

void route_supervisor::InternalSwap(route_supervisor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.load_list_.InternalSwap(&other->_impl_.load_list_);
  swap(_impl_.category_, other->_impl_.category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata route_supervisor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_supervisor_5fmessage_2eproto_getter, &descriptor_table_supervisor_5fmessage_2eproto_once,
      file_level_metadata_supervisor_5fmessage_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace supr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::supr::load_type*
Arena::CreateMaybeMessage< ::supr::load_type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::supr::load_type >(arena);
}
template<> PROTOBUF_NOINLINE ::supr::route_supervisor*
Arena::CreateMaybeMessage< ::supr::route_supervisor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::supr::route_supervisor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
