// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supervisor_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_supervisor_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_supervisor_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_supervisor_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_supervisor_5fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_supervisor_5fmessage_2eproto;
namespace supr {
class load_type;
struct load_typeDefaultTypeInternal;
extern load_typeDefaultTypeInternal _load_type_default_instance_;
class route_supervisor;
struct route_supervisorDefaultTypeInternal;
extern route_supervisorDefaultTypeInternal _route_supervisor_default_instance_;
}  // namespace supr
PROTOBUF_NAMESPACE_OPEN
template<> ::supr::load_type* Arena::CreateMaybeMessage<::supr::load_type>(Arena*);
template<> ::supr::route_supervisor* Arena::CreateMaybeMessage<::supr::route_supervisor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace supr {

enum route_supervisor_category : int {
  SERVER_LIST = 0,
  FORCE_OFFLINE = 1,
  route_supervisor_category_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  route_supervisor_category_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool route_supervisor_category_IsValid(int value);
constexpr route_supervisor_category route_supervisor_category_MIN = SERVER_LIST;
constexpr route_supervisor_category route_supervisor_category_MAX = FORCE_OFFLINE;
constexpr int route_supervisor_category_ARRAYSIZE = route_supervisor_category_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* route_supervisor_category_descriptor();
template<typename T>
inline const std::string& route_supervisor_category_Name(T enum_t_value) {
  static_assert(::std::is_same<T, route_supervisor_category>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function route_supervisor_category_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    route_supervisor_category_descriptor(), enum_t_value);
}
inline bool route_supervisor_category_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, route_supervisor_category* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<route_supervisor_category>(
    route_supervisor_category_descriptor(), name, value);
}
enum server_type : int {
  ROUTE_SERVER = 0,
  BUSINESS_SERVER = 1,
  AUTH_SERVER = 2,
  server_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  server_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool server_type_IsValid(int value);
constexpr server_type server_type_MIN = ROUTE_SERVER;
constexpr server_type server_type_MAX = AUTH_SERVER;
constexpr int server_type_ARRAYSIZE = server_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* server_type_descriptor();
template<typename T>
inline const std::string& server_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, server_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function server_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    server_type_descriptor(), enum_t_value);
}
inline bool server_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, server_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<server_type>(
    server_type_descriptor(), name, value);
}
// ===================================================================

class load_type final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:supr.load_type) */ {
 public:
  inline load_type() : load_type(nullptr) {}
  ~load_type() override;
  explicit PROTOBUF_CONSTEXPR load_type(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  load_type(const load_type& from);
  load_type(load_type&& from) noexcept
    : load_type() {
    *this = ::std::move(from);
  }

  inline load_type& operator=(const load_type& from) {
    CopyFrom(from);
    return *this;
  }
  inline load_type& operator=(load_type&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const load_type& default_instance() {
    return *internal_default_instance();
  }
  static inline const load_type* internal_default_instance() {
    return reinterpret_cast<const load_type*>(
               &_load_type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(load_type& a, load_type& b) {
    a.Swap(&b);
  }
  inline void Swap(load_type* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(load_type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  load_type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<load_type>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const load_type& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const load_type& from) {
    load_type::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(load_type* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "supr.load_type";
  }
  protected:
  explicit load_type(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 6,
    kTypeFieldNumber = 1,
    kSessionCountFieldNumber = 2,
    kCpuUsageFieldNumber = 3,
    kMemoryFreeFieldNumber = 4,
    kMemoryTotalFieldNumber = 5,
  };
  // string address = 6;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // .supr.server_type type = 1;
  void clear_type();
  ::supr::server_type type() const;
  void set_type(::supr::server_type value);
  private:
  ::supr::server_type _internal_type() const;
  void _internal_set_type(::supr::server_type value);
  public:

  // int32 session_count = 2;
  void clear_session_count();
  int32_t session_count() const;
  void set_session_count(int32_t value);
  private:
  int32_t _internal_session_count() const;
  void _internal_set_session_count(int32_t value);
  public:

  // double cpu_usage = 3;
  void clear_cpu_usage();
  double cpu_usage() const;
  void set_cpu_usage(double value);
  private:
  double _internal_cpu_usage() const;
  void _internal_set_cpu_usage(double value);
  public:

  // uint64 memory_free = 4;
  void clear_memory_free();
  uint64_t memory_free() const;
  void set_memory_free(uint64_t value);
  private:
  uint64_t _internal_memory_free() const;
  void _internal_set_memory_free(uint64_t value);
  public:

  // uint64 memory_total = 5;
  void clear_memory_total();
  uint64_t memory_total() const;
  void set_memory_total(uint64_t value);
  private:
  uint64_t _internal_memory_total() const;
  void _internal_set_memory_total(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:supr.load_type)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    int type_;
    int32_t session_count_;
    double cpu_usage_;
    uint64_t memory_free_;
    uint64_t memory_total_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_supervisor_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class route_supervisor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:supr.route_supervisor) */ {
 public:
  inline route_supervisor() : route_supervisor(nullptr) {}
  ~route_supervisor() override;
  explicit PROTOBUF_CONSTEXPR route_supervisor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  route_supervisor(const route_supervisor& from);
  route_supervisor(route_supervisor&& from) noexcept
    : route_supervisor() {
    *this = ::std::move(from);
  }

  inline route_supervisor& operator=(const route_supervisor& from) {
    CopyFrom(from);
    return *this;
  }
  inline route_supervisor& operator=(route_supervisor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const route_supervisor& default_instance() {
    return *internal_default_instance();
  }
  static inline const route_supervisor* internal_default_instance() {
    return reinterpret_cast<const route_supervisor*>(
               &_route_supervisor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(route_supervisor& a, route_supervisor& b) {
    a.Swap(&b);
  }
  inline void Swap(route_supervisor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(route_supervisor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  route_supervisor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<route_supervisor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const route_supervisor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const route_supervisor& from) {
    route_supervisor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(route_supervisor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "supr.route_supervisor";
  }
  protected:
  explicit route_supervisor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadListFieldNumber = 2,
    kCategoryFieldNumber = 1,
  };
  // repeated string load_list = 2;
  int load_list_size() const;
  private:
  int _internal_load_list_size() const;
  public:
  void clear_load_list();
  const std::string& load_list(int index) const;
  std::string* mutable_load_list(int index);
  void set_load_list(int index, const std::string& value);
  void set_load_list(int index, std::string&& value);
  void set_load_list(int index, const char* value);
  void set_load_list(int index, const char* value, size_t size);
  std::string* add_load_list();
  void add_load_list(const std::string& value);
  void add_load_list(std::string&& value);
  void add_load_list(const char* value);
  void add_load_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& load_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_load_list();
  private:
  const std::string& _internal_load_list(int index) const;
  std::string* _internal_add_load_list();
  public:

  // .supr.route_supervisor_category category = 1;
  void clear_category();
  ::supr::route_supervisor_category category() const;
  void set_category(::supr::route_supervisor_category value);
  private:
  ::supr::route_supervisor_category _internal_category() const;
  void _internal_set_category(::supr::route_supervisor_category value);
  public:

  // @@protoc_insertion_point(class_scope:supr.route_supervisor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> load_list_;
    int category_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_supervisor_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// load_type

// .supr.server_type type = 1;
inline void load_type::clear_type() {
  _impl_.type_ = 0;
}
inline ::supr::server_type load_type::_internal_type() const {
  return static_cast< ::supr::server_type >(_impl_.type_);
}
inline ::supr::server_type load_type::type() const {
  // @@protoc_insertion_point(field_get:supr.load_type.type)
  return _internal_type();
}
inline void load_type::_internal_set_type(::supr::server_type value) {
  
  _impl_.type_ = value;
}
inline void load_type::set_type(::supr::server_type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:supr.load_type.type)
}

// int32 session_count = 2;
inline void load_type::clear_session_count() {
  _impl_.session_count_ = 0;
}
inline int32_t load_type::_internal_session_count() const {
  return _impl_.session_count_;
}
inline int32_t load_type::session_count() const {
  // @@protoc_insertion_point(field_get:supr.load_type.session_count)
  return _internal_session_count();
}
inline void load_type::_internal_set_session_count(int32_t value) {
  
  _impl_.session_count_ = value;
}
inline void load_type::set_session_count(int32_t value) {
  _internal_set_session_count(value);
  // @@protoc_insertion_point(field_set:supr.load_type.session_count)
}

// double cpu_usage = 3;
inline void load_type::clear_cpu_usage() {
  _impl_.cpu_usage_ = 0;
}
inline double load_type::_internal_cpu_usage() const {
  return _impl_.cpu_usage_;
}
inline double load_type::cpu_usage() const {
  // @@protoc_insertion_point(field_get:supr.load_type.cpu_usage)
  return _internal_cpu_usage();
}
inline void load_type::_internal_set_cpu_usage(double value) {
  
  _impl_.cpu_usage_ = value;
}
inline void load_type::set_cpu_usage(double value) {
  _internal_set_cpu_usage(value);
  // @@protoc_insertion_point(field_set:supr.load_type.cpu_usage)
}

// uint64 memory_free = 4;
inline void load_type::clear_memory_free() {
  _impl_.memory_free_ = uint64_t{0u};
}
inline uint64_t load_type::_internal_memory_free() const {
  return _impl_.memory_free_;
}
inline uint64_t load_type::memory_free() const {
  // @@protoc_insertion_point(field_get:supr.load_type.memory_free)
  return _internal_memory_free();
}
inline void load_type::_internal_set_memory_free(uint64_t value) {
  
  _impl_.memory_free_ = value;
}
inline void load_type::set_memory_free(uint64_t value) {
  _internal_set_memory_free(value);
  // @@protoc_insertion_point(field_set:supr.load_type.memory_free)
}

// uint64 memory_total = 5;
inline void load_type::clear_memory_total() {
  _impl_.memory_total_ = uint64_t{0u};
}
inline uint64_t load_type::_internal_memory_total() const {
  return _impl_.memory_total_;
}
inline uint64_t load_type::memory_total() const {
  // @@protoc_insertion_point(field_get:supr.load_type.memory_total)
  return _internal_memory_total();
}
inline void load_type::_internal_set_memory_total(uint64_t value) {
  
  _impl_.memory_total_ = value;
}
inline void load_type::set_memory_total(uint64_t value) {
  _internal_set_memory_total(value);
  // @@protoc_insertion_point(field_set:supr.load_type.memory_total)
}

// string address = 6;
inline void load_type::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& load_type::address() const {
  // @@protoc_insertion_point(field_get:supr.load_type.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void load_type::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:supr.load_type.address)
}
inline std::string* load_type::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:supr.load_type.address)
  return _s;
}
inline const std::string& load_type::_internal_address() const {
  return _impl_.address_.Get();
}
inline void load_type::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* load_type::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* load_type::release_address() {
  // @@protoc_insertion_point(field_release:supr.load_type.address)
  return _impl_.address_.Release();
}
inline void load_type::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:supr.load_type.address)
}

// -------------------------------------------------------------------

// route_supervisor

// .supr.route_supervisor_category category = 1;
inline void route_supervisor::clear_category() {
  _impl_.category_ = 0;
}
inline ::supr::route_supervisor_category route_supervisor::_internal_category() const {
  return static_cast< ::supr::route_supervisor_category >(_impl_.category_);
}
inline ::supr::route_supervisor_category route_supervisor::category() const {
  // @@protoc_insertion_point(field_get:supr.route_supervisor.category)
  return _internal_category();
}
inline void route_supervisor::_internal_set_category(::supr::route_supervisor_category value) {
  
  _impl_.category_ = value;
}
inline void route_supervisor::set_category(::supr::route_supervisor_category value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:supr.route_supervisor.category)
}

// repeated string load_list = 2;
inline int route_supervisor::_internal_load_list_size() const {
  return _impl_.load_list_.size();
}
inline int route_supervisor::load_list_size() const {
  return _internal_load_list_size();
}
inline void route_supervisor::clear_load_list() {
  _impl_.load_list_.Clear();
}
inline std::string* route_supervisor::add_load_list() {
  std::string* _s = _internal_add_load_list();
  // @@protoc_insertion_point(field_add_mutable:supr.route_supervisor.load_list)
  return _s;
}
inline const std::string& route_supervisor::_internal_load_list(int index) const {
  return _impl_.load_list_.Get(index);
}
inline const std::string& route_supervisor::load_list(int index) const {
  // @@protoc_insertion_point(field_get:supr.route_supervisor.load_list)
  return _internal_load_list(index);
}
inline std::string* route_supervisor::mutable_load_list(int index) {
  // @@protoc_insertion_point(field_mutable:supr.route_supervisor.load_list)
  return _impl_.load_list_.Mutable(index);
}
inline void route_supervisor::set_load_list(int index, const std::string& value) {
  _impl_.load_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:supr.route_supervisor.load_list)
}
inline void route_supervisor::set_load_list(int index, std::string&& value) {
  _impl_.load_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:supr.route_supervisor.load_list)
}
inline void route_supervisor::set_load_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.load_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:supr.route_supervisor.load_list)
}
inline void route_supervisor::set_load_list(int index, const char* value, size_t size) {
  _impl_.load_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:supr.route_supervisor.load_list)
}
inline std::string* route_supervisor::_internal_add_load_list() {
  return _impl_.load_list_.Add();
}
inline void route_supervisor::add_load_list(const std::string& value) {
  _impl_.load_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:supr.route_supervisor.load_list)
}
inline void route_supervisor::add_load_list(std::string&& value) {
  _impl_.load_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:supr.route_supervisor.load_list)
}
inline void route_supervisor::add_load_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.load_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:supr.route_supervisor.load_list)
}
inline void route_supervisor::add_load_list(const char* value, size_t size) {
  _impl_.load_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:supr.route_supervisor.load_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
route_supervisor::load_list() const {
  // @@protoc_insertion_point(field_list:supr.route_supervisor.load_list)
  return _impl_.load_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
route_supervisor::mutable_load_list() {
  // @@protoc_insertion_point(field_mutable_list:supr.route_supervisor.load_list)
  return &_impl_.load_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace supr

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::supr::route_supervisor_category> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::supr::route_supervisor_category>() {
  return ::supr::route_supervisor_category_descriptor();
}
template <> struct is_proto_enum< ::supr::server_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::supr::server_type>() {
  return ::supr::server_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_supervisor_5fmessage_2eproto
